git checkout <BRANCH>
git log

//REVERTER COMMIT (Mais seguro utilizar quando se tratar da 'master')
git revert <HASH CODE> -->  ':wq' to confirm

//REVERTER COMMIT (Bom para branches separadas)
git reset --hard <HASH CODE> --> remove as mudanças anteriores e o commit feito

git reset --soft <HASH CODE> --> remove somente commit e volta os arquivos com as mudanças

//FORÇAR UM PUSH CASO O HISTÓRICO REMOTO SEJA DIREFENTE DO LOCAL
git push origin master --force

//EDITAR UM COMMIT (preferencialmente usar antes de dar push)
git commit --amend --> apertar 'i' para edição, após editar ':wq'

//PEGAR UM COMMIT DE UMA OUTRA BRANCH
git cherry-pick <HASH CODE>

//COMITAR PARTES DE UM CODIGO
git add -p --> y,n

//JUNTAR COMMITS EM UM SÓ (REBASE INTERATIVO)
git rebase -i HEAD~2 --> aqui seriam agrupados os dois primeiros commits
usar 'squash' para juntar

//CORRIGIR COMMIT ANTERIOR COM FIXUP
git commit --fixup <HASH CODE COMMIT>

//AUTOSQUASH (JUNTAR FIXUP )
git rebase -i --autosquash <HASH CODE> --> ':wq'

//RESOLVER CONFLITOS DE HISTORICO/COMMIT
git pull origin <BRANCH> --rebase

//RESOLVER CONFLITOS ENTRE LOCAL E REMOTO (ALTERAÇÃO DA MESMA LINHA DE CODIGO NOS DOIS LOCAIS)
 dar pull no repoditorio remoto para p local, resolver os conflitos e depois
 git merge --continue --> ':wq'

 //AUTO CORREÇÃO GIT
 git config --global help.autocorrect 1

 //"ZIPAR" REPOSITORIO LOCAL
 git arquive <BRANCH> --format=zip --output=<NOME DO ARQUIVO>

 //LOG ORGANIZADO DE OUTRA FORMA
 git log --pretty=oneline
 
 //LOG ORGANIZADO DE OUTRA FORMA(COM GRAFICO)
 git log --pretty=oneline --graph
 
 //LOG ORGANIZADO DE OUTRA FORMA(ALL)
 git log --pretty=oneline --graph --all

 //FILTRO DE LOG POR DATA (DESDE...)
 git log --since='Jan 1 2020'

 //FILTRO DE LOG POR DATA (ATÉ...)
 git log --until='Jan 1 2020'

 //FILTRO DE LOG POR DATA (ENTRE DUAS DATAS)
 git log --since='Jan 1 2020' --until='Jan 12 2020'

//FILTRO DE LOG POR AUTOR
git log --author='matheus'

//LOG CURTO
git shortlog

//LOG CURTO(SÓ QUANTIDADE DE COMMITS)
git shortlog -sn

//LOG CURTO(QUANTIDADE EXATA DE COMMITS)
git log -3

//EXIBIR O LOG DETALHADO
git reflog
